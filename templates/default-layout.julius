$(document).ready(function(){

  if($.browser.msie && $.browser.version < 10){
    $.datepicker.setDefaults($.extend($.datepicker.regional['ja']));
    $("input[type='date']").datepicker({
      dateFormat: 'yy-mm-dd',
      onSelect: function (dateText, inst) {
        // placeholoderと連携している.
        $(this).css('color', $(this).attr('defaultColor'));
      }
    });
  }

  if($.browser.msie && $.browser.version < 8){
    $("button[name=_method]").each(function(){
      // IEではbuttonのvalueを取得するのは異常に面倒くさい
      // ダメなのは以下
      // jquery $(this).val(), $(this).attr('value')
      // javascript element.getAttribute('value')
      // というわけでattributesのgetNamedItem経由でnodeValueを取得した
      //
      var btn = $(this)[0],
          val = btn.attributes.getNamedItem('value').nodeValue;
      $(this).text(val);
    });
  }

  $("form.validate").submit(function(){
    var valid = true;
    $('span.invalid').remove();
    $('input.cond-required, textarea.cond-required').each(function(){
      var thisBox = $(this),
          condnames = thisBox.attr('cond').split(',');
      thisBox.removeClass('invalid');
      if ($.trim(thisBox.val())=="") {
        $.each(condnames, function(i,condname) {
          var cond = $("[name='" + $.trim(condname) + "']"),
              conddisp = cond.attr('displayname'),
              condval = $.trim(cond.val());
          if (condval!="") {
            thisBox.addClass('invalid');
            thisBox.after("<span class='invalid'> " + conddisp + " に入力した場合には必須入力項目です.</span>");
            valid = false
          }
        });
      }
    });
    return valid;
  });

  AjaxZip2.JSONDATA = '#{rawJS $ approot' y}' + '/static/plugins/ajaxzip2/data';
});

function mkList(from,to) {
  var ret = [];
  ret.length = to-(from-1);
  for(var i=0; i<ret.length; i++){
    ret[i]=from+i;
  }
  return ret;
}

// currentは0ベースのページ番号.
// 返り値は{page:# of page(0base), disp: display text}なオブジェクトのリストのリスト.
function mkPagenate(fillGap, width, current, maxPage) {
  var cc = current+1,
      ll = 1,
      lr = ll+width,
      cl = cc-width,
      cr = cc+width,
      rl = maxPage-width,
      rr = maxPage,
      leftConnected = cl-lr<=fillGap,
      rightConnected = rl-cr<=fillGap,
      ret = [];
  if (leftConnected && rightConnected) {
    ret.length=1;
    ret[0] = $.map(mkList(ll, rr), function(n){return {page:n-1,disp:n+''};});
  } else if (leftConnected) {
    ret.length=2;
    ret[0] = $.map(mkList(ll, cr), function(n){return {page:n-1,disp:n+''};});
    ret[1] = $.map(mkList(rl, rr), function(n){return {page:n-1,disp:n+''};});
  } else if (rightConnected) {
    ret.length=2;
    ret[0] = $.map(mkList(ll, lr), function(n){return {page:n-1,disp:n+''};});
    ret[1] = $.map(mkList(cl, rr), function(n){return {page:n-1,disp:n+''};});
  } else {
    ret.length=3;
    ret[0] = $.map(mkList(ll, lr), function(n){return {page:n-1,disp:n+''};});
    ret[1] = $.map(mkList(cl, cr), function(n){return {page:n-1,disp:n+''};});
    ret[2] = $.map(mkList(rl, rr), function(n){return {page:n-1,disp:n+''};});
  }
  return ret;
}

function intersperse(sep, list){
  var ret = [];
  ret.length = list.length*2-1;
  for(var i=0;i<ret.length;i++){
    ret[i] = i%2==0 ? list[i/2] : sep
  }
  return ret;
}

function isNull(obj) {
  for(var x in obj)return false;
  return true;
}

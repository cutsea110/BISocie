$(document).ready(function(){

  if($.browser.msie && $.browser.version < 8){
    $("button[name=_method]").each(function(){
      // IEではbuttonのvalueを取得するのは異常に面倒くさい
      // ダメなのは以下
      // jquery $(this).val(), $(this).attr('value')
      // javascript element.getAttribute('value')
      // というわけでattributesのgetNamedItem経由でnodeValueを取得した
      //
      var btn = $(this)[0],
          val = btn.attributes.getNamedItem('value').nodeValue;
      $(this).text(val);
    });
  }

  $("#message").fadeOut(3000, function(){$(this).remove();});

  $("form.validate").submit(function(){
    var valid = true;
    $('span.invalid').remove();
    $('input.required, textarea.required').each(function(){
      $(this).removeClass('invalid');
      if ( $.trim($(this).val()) == "") {
        $(this).addClass('invalid');
        $(this).after("<span class='invalid'>必須入力項目です.</span>");
        valid = false;
      }
    });
    $('input.cond-required, textarea.cond-required').each(function(){
      var thisBox = $(this),
          condnames = thisBox.attr('cond').split(',');
      thisBox.removeClass('invalid');
      if ($.trim(thisBox.val())=="") {
        $.each(condnames, function(i,condname) {
          var cond = $("[name='" + $.trim(condname) + "']"),
              conddisp = cond.attr('displayname'),
              condval = $.trim(cond.val());
          if (condval!="") {
            thisBox.addClass('invalid');
            thisBox.after("<span class='invalid'> " + conddisp + " に入力した場合には必須入力項目です.</span>");
            valid = false
          }
        });
      }
    });
    return valid;
  });

  $(".watermark").watermark();
  $(".login-options").attr("title","Login to BISocie").dialog({
    autoOpen: true,
    width: 520,
    modal: true,
    open: function () {
      document.getElementById('loginAccountId').focus();
    }
  });

  AjaxZip2.JSONDATA = '#{approot y}' + '/static/plugins/ajaxzip2/data';

  $.datepicker.regional['ja'] = {
    autoSize: true,
    clearText: '', clearStatus: '',
    closeText: '閉じる', closeStatus: '',
    prevText: '<前月', prevStatus: '',
    nextText: '次月>', nextStatus: '',
    currentText: '今日', currentStatus: '',
    monthNames: ['1月','2月','3月','4月','5月','6月','7月','8月','9月','10月','11月','12月',],
    monthNamesShort: ['1月','2月','3月','4月','5月','6月','7月','8月','9月','10月','11月','12月',],
    monthStatus: '', yearStatus: '',
    weekHeader: 'Wk', weekStatus: '',
    dayNames: ['日','月','火','水','木','金','土'],
    dayNamesShort: ['日','月','火','水','木','金','土'],
    dayNamesMin: ['日','月','火','水','木','金','土'],
    dayStatus: 'DD', dateStatus: 'D, M d',
    dateFormat: 'yy-mm-dd', firstDay: 1,
    initStatus: '',
    isRTL: false
  }
  $.datepicker.setDefaults($.datepicker.regional['ja']);
  $.datepicker.setDefaults({
    buttonText: 'Calendar',
    showAnim: 'slideDown',
    speed: 'fast',
    changeYear: true,
    changeMonth: true
  });
  $(".date").datepicker();

  $(".time").clockpick({
    starthour: 0,
    endhour: 23,
    showminutes: true,
    minutedivisions: 4,
    military: true,
  });

  $(".inplaceedit").each(function(){
    $(this).exInPlaceEditor({
      nulltext: $(this).attr('placeholder') || '未設定',
      onsave: function(api) {
        var text = api.getEditor(),
            data = '_method=modify&'+text.attr('name')+'='+api.getValue();
        api.saving();
        $.ajax({
          type: 'post',
          dataType: 'json',
          url: text.attr('uri'),
          data: data,
          success: function(res){
            api.saveComplete();
          },
          error: function(res,status){
            var msg = $(res.responseText).find('div#ui-main li:last').text();
            api.saveError(res.statusText+'['+res.status+']: '+$(res.responseText).find('p').text()+msg);
          }
        });
        return false;
      }
    });
  });
});

function mkList(from,to) {
  var ret = [];
  ret.length = to-(from-1);
  for(var i=0; i<ret.length; i++){
    ret[i]=from+i;
  }
  return ret;
}

// currentは0ベースのページ番号.
// 返り値は{page:# of page(0base), disp: display text}なオブジェクトのリストのリスト.
function mkPagenate(fillGap, width, current, maxPage) {
  var cc = current+1,
      ll = 1,
      lr = ll+width,
      cl = cc-width,
      cr = cc+width,
      rl = maxPage-width,
      rr = maxPage,
      leftConnected = cl-lr<=fillGap,
      rightConnected = rl-cr<=fillGap,
      ret = [];
  if (leftConnected && rightConnected) {
    ret.length=1;
    ret[0] = $.map(mkList(ll, rr), function(n){return {page:n-1,disp:n+''};});
  } else if (leftConnected) {
    ret.length=2;
    ret[0] = $.map(mkList(ll, cr), function(n){return {page:n-1,disp:n+''};});
    ret[1] = $.map(mkList(rl, rr), function(n){return {page:n-1,disp:n+''};});
  } else if (rightConnected) {
    ret.length=2;
    ret[0] = $.map(mkList(ll, lr), function(n){return {page:n-1,disp:n+''};});
    ret[1] = $.map(mkList(cl, rr), function(n){return {page:n-1,disp:n+''};});
  } else {
    ret.length=3;
    ret[0] = $.map(mkList(ll, lr), function(n){return {page:n-1,disp:n+''};});
    ret[1] = $.map(mkList(cl, cr), function(n){return {page:n-1,disp:n+''};});
    ret[2] = $.map(mkList(rl, rr), function(n){return {page:n-1,disp:n+''};});
  }
  return ret;
}

function intersperse(sep, list){
  var ret = [];
  ret.length = list.length*2-1;
  for(var i=0;i<ret.length;i++){
    ret[i] = i%2==0 ? list[i/2] : sep
  }
  return ret;
}

function isNull(obj) {
  for(var x in obj)return false;
  return true;
}
